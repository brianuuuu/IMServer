#ifndef __NETWORK_BASE_H
#define __NETWORK_BASE_H

#define SESS_CONT_TYPE_IM_DATA		0x1
#define SESS_CONT_TYPE_AUDIO		0x2
#define SESS_CONT_TYPE_CONTR		0x4
#define SESS_CONT_TYPE_CHAT			0x8

#define CONF_TYPE_NONE				0x0
#define CONF_TYPE_PEER_TO_PEER		0x1
#define CONF_TYPE_AUDIO_CONF		0x2
#define CONF_TYPE_TELECONFERENCE	0x3
#define CONF_TYPE_CHAT				0x4

#define CONN_CONT_TYPE_IM_DATA		0x1
#define CONN_CONT_TYPE_AUDIO		0x2
#define CONN_CONT_TYPE_CONTR		0x4
#define CONN_CONT_TYPE_CHAT			0x8

#define CONN_CONT_RELIABLE_BIT		(1<<31)
#define CONN_CONT_TYPE_REL_IM_DATA	(CONN_CONT_TYPE_IM_DATA|CONN_CONT_RELIABLE_BIT)
#define CONN_CONT_TYPE_REL_AUDIO	(CONN_CONT_TYPE_AUDIO|CONN_CONT_RELIABLE_BIT)
#define CONN_CONT_TYPE_REL_CONTR	(CONN_CONT_TYPE_CONTR|CONN_CONT_RELIABLE_BIT)
#define CONN_CONT_TYPE_REL_CHAT		(CONN_CONT_TYPE_CHAT|CONN_CONT_RELIABLE_BIT)

enum { TYPE_AUTO, TYPE_UDP, TYPE_TCP, TYPE_SSL, TYPE_HTTP, TYPE_PREV};

enum {
	REASON_SUCCESSFUL = 0,
	REASON_SERVER_UNAVAILABLE, 
	REASON_SERVER_DISCONNECT,
	REASON_PEER_DISCONNECT,
	REASON_SERVER_ERROR,
	REASON_SOCKET_ERROR,
	REASON_BIND_ERROR,
	REASON_KEEPALIVE_TIMEOUT,
	REASON_SERVER_DELETE,
	REASON_CONNECT_TIMEOUT,
	REASON_DNS_ERROR,
	REASON_PEER_REJECT,
	REASON_SERVER_USER_DEL_PENDING,
	REASON_SERVER_LOAD_OVERFLOW,
	REASON_UNKNOWN_ERROR,
};


#define WUO_NETWORK_ERROR_NOERROR				0x0
#define WUO_NETWORK_ERROR_BASE					0x600000
#define WUO_NETWORK_ERROR_INVALID_ADDR			(WUO_NETWORK_ERROR_BASE+1)
#define WUO_NETWORK_ERROR_INVALID_SESSTYPE		(WUO_NETWORK_ERROR_BASE+2)
#define WUO_NETWORK_ERROR_INVALID_CONTTYPE		(WUO_NETWORK_ERROR_BASE+3)
#define WUO_NETWORK_ERROR_INVALID_DATALENGTH	(WUO_NETWORK_ERROR_BASE+4)
#define WUO_NETWORK_ERROR_INVALID_DATA			(WUO_NETWORK_ERROR_BASE+5)
#define WUO_NETWORK_ERROR_INVALID_PARAM			(WUO_NETWORK_ERROR_BASE+6)
#define WUO_NETWORK_ERROR_NOT_CONNECTED			(WUO_NETWORK_ERROR_BASE+7)
#define WUO_NETWORK_ERROR_BUFFER_FULL			(WUO_NETWORK_ERROR_BASE+8)
#define WUO_NETWORK_ERROR_NO_MEMORY				(WUO_NETWORK_ERROR_BASE+9)
#define WUO_NETWORK_ERROR_NOT_INITIALIZED		(WUO_NETWORK_ERROR_BASE+10)
#define WUO_NETWORK_ERROR_RECONNECT				(WUO_NETWORK_ERROR_BASE+10)
#define WUO_NETWORK_ERROR_UNKNOW				(WUO_NETWORK_ERROR_BASE+100)


/***********************************************************************
* Set Options
 ***********************************************************************/
struct WuoNetOptSetKey
{
	unsigned long dwkeyLen;
	unsigned char *pKey;
};

#define WUO_NETWORK_OPTION_SET_BASE				0x10000
//Parameter is pointer to WuoNetOptSetKey, 
//will enable encrypt automatically after set the key
#define WUO_NET_OPT_TYPE_SET_KEY				(WUO_NETWORK_OPTION_SET_BASE+1)
//Parameter is pointer to long, if 1 enabled, 0 disabled
#define WUO_NET_OPT_TYPE_ENABLE_ENCRYPT			(WUO_NETWORK_OPTION_SET_BASE+2)
//Set connection buffer number. It is the number of packets hold in Connection
//layer. 
//Parameter is pointer to long.
#define WUO_NET_OPT_TYPE_SET_CON_BUF_NUM		(WUO_NETWORK_OPTION_SET_BASE+3)

#define WUO_TRANSPORT_OPT_SET_BASE				0x12000
//Param. is Pointer to DWORD
#define WUO_TRANSPORT_OPT_SET_RCV_BUF_LEN		(WUO_TRANSPORT_OPT_SET_BASE+1)
//Param. is Pointer to DWORD
#define WUO_TRANSPORT_OPT_SET_SND_BUF_LEN		(WUO_TRANSPORT_OPT_SET_BASE+2)
//Param. is Pointer to DWORD 1:Can 0:Can't
#define WUO_TRANSPORT_OPT_SET_CAN_RCV_DATA		(WUO_TRANSPORT_OPT_SET_BASE+3)

/***********************************************************************
* Get Options
 ***********************************************************************/
#define WUO_NETWORK_OPTION_GET_BASE				0x30000

//Parameter is a pointer to ulong
enum
{
	CON_TYPE_BASE = 0,
	CON_TYPE_CONNECT_TO_PEER,
	CON_TYPE_PEER_CONNECT_IN,
	CON_TYPE_CONNECT_TO_SERVER
};
#define WUO_NET_OPT_TYPE_GET_CON_TYPE			(WUO_NETWORK_OPTION_GET_BASE+1)

//Parameter is a pointer to ulong
//TYPE_TCP, TYPE_UDP ...
#define WUO_NET_OPT_TYPE_GET_TRANS_TYPE			(WUO_NETWORK_OPTION_GET_BASE+2)

#define WUO_TRANSPORT_OPT_GET_BASE				0x32000
//Param. is Pointer to DWORD
//IO Read len
#define WUO_TRANSPORT_OPT_GET_FIO_NREAD			(WUO_TRANSPORT_OPT_GET_BASE+1)
//Param. is Pointer to DWORD
//Transport unread len
#define WUO_TRANSPORT_OPT_GET_TRAN_NREAD		(WUO_TRANSPORT_OPT_GET_BASE+2)
//Param. is Pointer to CM_HANDLE
//Get fd
#define WUO_TRANSPORT_OPT_GET_FD				(WUO_TRANSPORT_OPT_GET_BASE+3)
//Param. is Pointer to CInetAddr
//Get address socket binded
#define WUO_TRANSPORT_OPT_GET_LOCAL_ADDR		(WUO_TRANSPORT_OPT_GET_BASE+4)
//Param. is Pointer to CInetAddr
//Get peer addr
#define WUO_TRANSPORT_OPT_GET_PEER_ADDR			(WUO_TRANSPORT_OPT_GET_BASE+5)
//If the socket is still alive
//Param. is Pointer to BOOL
#define WUO_TRANSPORT_OPT_GET_SOCK_ALIVE		(WUO_TRANSPORT_OPT_GET_BASE+6)
//Param. is Pointer to DWORD
//TYPE_TCP, TYPE_UDP, TYPE_SSL...
#define WUO_TRANSPORT_OPT_GET_TRAN_TYPE 		(WUO_TRANSPORT_OPT_GET_BASE+7)

// budingc add to support SO_KEEPALIVE function
//Param. is Pointer to DWORD
#define WUO_TRANSPORT_OPT_SET_TCP_KEEPALIVE		(WUO_TRANSPORT_OPT_GET_BASE+8)

//#include "TraceLog.h"

#endif// __NETWORK_BASE_H

